"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const document_1 = require("../document");
const text_splitter_1 = require("../text_splitter");
(0, globals_1.test)("Test splitting by character count.", () => {
    const text = "foo bar baz 123";
    const splitter = new text_splitter_1.CharacterTextSplitter({
        separator: " ",
        chunkSize: 7,
        chunkOverlap: 3,
    });
    const output = splitter.splitText(text);
    const expectedOutput = ["foo bar", "bar baz", "baz 123"];
    (0, globals_1.expect)(output).toEqual(expectedOutput);
});
(0, globals_1.test)("Test splitting by character count doesn't create empty documents.", () => {
    const text = "foo  bar";
    const splitter = new text_splitter_1.CharacterTextSplitter({
        separator: " ",
        chunkSize: 2,
        chunkOverlap: 0,
    });
    const output = splitter.splitText(text);
    const expectedOutput = ["foo", "bar"];
    (0, globals_1.expect)(output).toEqual(expectedOutput);
});
(0, globals_1.test)("Test splitting by character count on long words.", () => {
    const text = "foo bar baz a a";
    const splitter = new text_splitter_1.CharacterTextSplitter({
        separator: " ",
        chunkSize: 3,
        chunkOverlap: 1,
    });
    const output = splitter.splitText(text);
    const expectedOutput = ["foo", "bar", "baz", "a a"];
    (0, globals_1.expect)(output).toEqual(expectedOutput);
});
(0, globals_1.test)("Test splitting by character count when shorter words are first.", () => {
    const text = "a a foo bar baz";
    const splitter = new text_splitter_1.CharacterTextSplitter({
        separator: " ",
        chunkSize: 3,
        chunkOverlap: 1,
    });
    const output = splitter.splitText(text);
    const expectedOutput = ["a a", "foo", "bar", "baz"];
    (0, globals_1.expect)(output).toEqual(expectedOutput);
});
(0, globals_1.test)("Test splitting by characters when splits not found easily.", () => {
    const text = "foo bar baz 123";
    const splitter = new text_splitter_1.CharacterTextSplitter({
        separator: " ",
        chunkSize: 1,
        chunkOverlap: 0,
    });
    const output = splitter.splitText(text);
    const expectedOutput = ["foo", "bar", "baz", "123"];
    (0, globals_1.expect)(output).toEqual(expectedOutput);
});
(0, globals_1.test)("Test invalid arguments.", () => {
    (0, globals_1.expect)(() => {
        const res = new text_splitter_1.CharacterTextSplitter({ chunkSize: 2, chunkOverlap: 4 });
        console.log(res);
    }).toThrow();
});
(0, globals_1.test)("Test create documents method.", () => {
    const texts = ["foo bar", "baz"];
    const splitter = new text_splitter_1.CharacterTextSplitter({
        separator: " ",
        chunkSize: 3,
        chunkOverlap: 0,
    });
    const docs = splitter.createDocuments(texts);
    const expectedDocs = [
        new document_1.Document({ pageContent: "foo" }),
        new document_1.Document({ pageContent: "bar" }),
        new document_1.Document({ pageContent: "baz" }),
    ];
    (0, globals_1.expect)(docs).toEqual(expectedDocs);
});
(0, globals_1.test)("Test create documents with metadata method.", () => {
    const texts = ["foo bar", "baz"];
    const splitter = new text_splitter_1.CharacterTextSplitter({
        separator: " ",
        chunkSize: 3,
        chunkOverlap: 0,
    });
    const docs = splitter.createDocuments(texts, [
        { source: "1" },
        { source: "2" },
    ]);
    const expectedDocs = [
        new document_1.Document({ pageContent: "foo", metadata: { source: "1" } }),
        new document_1.Document({ pageContent: "bar", metadata: { source: "1" } }),
        new document_1.Document({ pageContent: "baz", metadata: { source: "2" } }),
    ];
    (0, globals_1.expect)(docs).toEqual(expectedDocs);
});
(0, globals_1.test)("Test iterative text splitter.", () => {
    const text = `Hi.\n\nI'm Harrison.\n\nHow? Are? You?\nOkay then f f f f.
This is a weird text to write, but gotta test the splittingggg some how.\n\n
Bye!\n\n-H.`;
    const splitter = new text_splitter_1.RecursiveCharacterTextSplitter({
        chunkSize: 10,
        chunkOverlap: 1,
    });
    const output = splitter.splitText(text);
    const expectedOutput = [
        "Hi.",
        "I'm",
        "Harrison.",
        "How? Are?",
        "You?",
        "Okay then f",
        "f f f f.",
        "This is a",
        "a weird",
        "text to",
        "write, but",
        "gotta test",
        "the",
        "splitting",
        "gggg",
        "some how.",
        "Bye!\n\n-H.",
    ];
    (0, globals_1.expect)(output).toEqual(expectedOutput);
});
(0, globals_1.test)("Token text splitter", () => {
    const text = "foo bar baz a a";
    const splitter = new text_splitter_1.TokenTextSplitter({
        encodingName: "r50k_base",
        chunkSize: 3,
        chunkOverlap: 0,
    });
    const output = splitter.splitText(text);
    const expectedOutput = ["foo bar b", "az a a"];
    (0, globals_1.expect)(output).toEqual(expectedOutput);
});
//# sourceMappingURL=text_splitter.test.js.map