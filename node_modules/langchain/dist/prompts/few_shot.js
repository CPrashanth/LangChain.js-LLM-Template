"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FewShotPromptTemplate = void 0;
const index_1 = require("./index");
const template_1 = require("./template");
const util_1 = require("../util");
const prompt_1 = require("./prompt");
const parser_1 = require("./parser");
/**
 * Prompt template that contains few-shot examples.
 * @augments BasePromptTemplate
 * @augments FewShotPromptTemplateInput
 */
class FewShotPromptTemplate extends index_1.BasePromptTemplate {
    constructor(input) {
        super(input);
        Object.defineProperty(this, "examples", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "exampleSelector", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "examplePrompt", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "suffix", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "exampleSeparator", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "prefix", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "templateFormat", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "f-string"
        });
        Object.defineProperty(this, "validateTemplate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.assign(this, input);
        if (this.examples !== undefined && this.exampleSelector !== undefined) {
            throw new Error("Only one of 'examples' and 'example_selector' should be provided");
        }
        if (this.examples === undefined && this.exampleSelector === undefined) {
            throw new Error("One of 'examples' and 'example_selector' should be provided");
        }
        if (this.validateTemplate) {
            (0, template_1.checkValidTemplate)(this.prefix + this.suffix, this.templateFormat, this.inputVariables);
        }
    }
    _getPromptType() {
        return "few_shot";
    }
    getExamples(_) {
        if (this.examples !== undefined) {
            return this.examples;
        }
        if (this.exampleSelector !== undefined) {
            throw new Error("Example selectors are not yet supported.");
        }
        throw new Error("One of 'examples' and 'example_selector' should be provided");
    }
    format(values) {
        const examples = this.getExamples(values);
        const exampleStrings = examples.map((example) => this.examplePrompt.format(example));
        const template = [this.prefix, ...exampleStrings, this.suffix].join(this.exampleSeparator);
        return (0, template_1.renderTemplate)(template, this.templateFormat, values);
    }
    serialize() {
        var _a;
        if (this.exampleSelector || !this.examples) {
            throw new Error("Serializing an example selector is not currently supported");
        }
        return {
            _type: this._getPromptType(),
            input_variables: this.inputVariables,
            output_parser: (_a = this.outputParser) === null || _a === void 0 ? void 0 : _a.serialize(),
            example_prompt: this.examplePrompt.serialize(),
            example_separator: this.exampleSeparator,
            suffix: this.suffix,
            prefix: this.prefix,
            template_format: this.templateFormat,
            examples: this.examples,
        };
    }
    static async deserialize(data) {
        const serializedPrompt = (0, util_1.resolveConfigFromFile)("example_prompt", data);
        const examplePrompt = await prompt_1.PromptTemplate.deserialize(serializedPrompt);
        let examples;
        if (typeof data.examples === "string") {
            examples = (0, util_1.parseFileConfig)(data.examples, [".json", ".yml", ".yaml"]);
        }
        else if (Array.isArray(data.examples)) {
            examples = data.examples;
        }
        else {
            throw new Error("Invalid examples format. Only list or string are supported.");
        }
        return new FewShotPromptTemplate({
            inputVariables: data.input_variables,
            outputParser: data.output_parser && parser_1.BaseOutputParser.deserialize(data.output_parser),
            examplePrompt,
            examples,
            exampleSeparator: data.example_separator,
            prefix: (0, util_1.resolveTemplateFromFile)("prefix", data),
            suffix: (0, util_1.resolveTemplateFromFile)("suffix", data),
            templateFormat: data.template_format,
        });
    }
}
exports.FewShotPromptTemplate = FewShotPromptTemplate;
//# sourceMappingURL=few_shot.js.map