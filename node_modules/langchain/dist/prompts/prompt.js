"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromptTemplate = void 0;
const index_1 = require("./index");
const template_1 = require("./template");
const util_1 = require("../util");
const parser_1 = require("./parser");
/**
 * Schema to represent a basic prompt for an LLM.
 * @augments BasePromptTemplate
 * @augments PromptTemplateInput
 *
 * @example
 * ```ts
 * import { PromptTemplate } from "langchain/prompts";
 *
 * const prompt = new PromptTemplate({
 *   inputVariables: ["foo"],
 *   template: "Say {foo}",
 * });
 * ```
 */
class PromptTemplate extends index_1.BasePromptTemplate {
    constructor(input) {
        super(input);
        Object.defineProperty(this, "template", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "templateFormat", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "f-string"
        });
        Object.defineProperty(this, "validateTemplate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.assign(this, input);
        if (this.validateTemplate) {
            (0, template_1.checkValidTemplate)(this.template, this.templateFormat, this.inputVariables);
        }
    }
    _getPromptType() {
        return "prompt";
    }
    format(values) {
        return (0, template_1.renderTemplate)(this.template, this.templateFormat, values);
    }
    /**
     * Take examples in list format with prefix and suffix to create a prompt.
     *
     * Intendend to be used a a way to dynamically create a prompt from examples.
     *
     * @param examples - List of examples to use in the prompt.
     * @param suffix - String to go after the list of examples. Should generally set up the user's input.
     * @param inputVariables - A list of variable names the final prompt template will expect
     * @param exampleSeparator - The separator to use in between examples
     * @param prefix - String that should go before any examples. Generally includes examples.
     *
     * @returns The final prompt template generated.
     */
    static fromExamples(examples, suffix, inputVariables, exampleSeparator = "\n\n", prefix = "") {
        const template = [prefix, ...examples, suffix].join(exampleSeparator);
        return new PromptTemplate({
            inputVariables,
            template,
        });
    }
    /**
     * Load prompt template from a template f-string
     */
    static fromTemplate(template) {
        const names = new Set();
        (0, template_1.parseFString)(template).forEach((node) => {
            if (node.type === "variable") {
                names.add(node.name);
            }
        });
        return new PromptTemplate({
            inputVariables: [...names],
            template,
        });
    }
    serialize() {
        var _a;
        return {
            _type: this._getPromptType(),
            input_variables: this.inputVariables,
            output_parser: (_a = this.outputParser) === null || _a === void 0 ? void 0 : _a.serialize(),
            template: this.template,
            template_format: this.templateFormat,
        };
    }
    static async deserialize(data) {
        const res = new PromptTemplate({
            inputVariables: data.input_variables,
            outputParser: data.output_parser && parser_1.BaseOutputParser.deserialize(data.output_parser),
            template: (0, util_1.resolveTemplateFromFile)("template", data),
            templateFormat: data.template_format,
        });
        return res;
    }
}
exports.PromptTemplate = PromptTemplate;
//# sourceMappingURL=prompt.js.map