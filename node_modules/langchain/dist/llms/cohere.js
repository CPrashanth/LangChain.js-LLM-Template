"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cohere = void 0;
const _1 = require(".");
class Cohere extends _1.LLM {
    constructor(fields) {
        var _a, _b, _c;
        super(fields === null || fields === void 0 ? void 0 : fields.callbackManager, fields === null || fields === void 0 ? void 0 : fields.verbose, fields === null || fields === void 0 ? void 0 : fields.concurrency, fields === null || fields === void 0 ? void 0 : fields.cache);
        Object.defineProperty(this, "temperature", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "maxTokens", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 250
        });
        Object.defineProperty(this, "model", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.maxTokens = (_a = fields === null || fields === void 0 ? void 0 : fields.maxTokens) !== null && _a !== void 0 ? _a : this.maxTokens;
        this.temperature = (_b = fields === null || fields === void 0 ? void 0 : fields.temperature) !== null && _b !== void 0 ? _b : this.temperature;
        this.model = (_c = fields === null || fields === void 0 ? void 0 : fields.model) !== null && _c !== void 0 ? _c : this.model;
    }
    _llmType() {
        return "cohere";
    }
    async _call(prompt, _stop) {
        // eslint-disable-next-line global-require,import/no-extraneous-dependencies,@typescript-eslint/no-var-requires
        const cohere = require("cohere-ai");
        cohere.init(process.env.COHERE_API_KEY);
        // Hit the `generate` endpoint on the `large` model
        const generateResponse = await cohere.generate({
            prompt,
            model: this.model,
            max_tokens: this.maxTokens,
            temperature: this.temperature,
        });
        try {
            return generateResponse.body.generations[0].text;
        }
        catch (_a) {
            console.log(generateResponse);
            throw new Error("Could not parse response.");
        }
    }
}
exports.Cohere = Cohere;
//# sourceMappingURL=cohere.js.map