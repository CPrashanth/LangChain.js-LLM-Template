"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenAIEmbeddings = void 0;
const exponential_backoff_1 = require("exponential-backoff");
const util_1 = require("../util");
const base_1 = require("./base");
let Configuration = null;
let OpenAIApi = null;
try {
    // eslint-disable-next-line global-require,import/no-extraneous-dependencies
    ({ Configuration, OpenAIApi } = require("openai"));
}
catch (_a) {
    // ignore error
}
class OpenAIEmbeddings extends base_1.Embeddings {
    constructor(fields) {
        var _a, _b, _c;
        super();
        Object.defineProperty(this, "modelName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "text-embedding-ada-002"
        });
        Object.defineProperty(this, "batchSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 20
        });
        Object.defineProperty(this, "maxRetries", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 6
        });
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        if (Configuration === null || OpenAIApi === null) {
            throw new Error("Please install openai as a dependency with, e.g. `npm install -S openai`");
        }
        this.modelName = (_a = fields === null || fields === void 0 ? void 0 : fields.modelName) !== null && _a !== void 0 ? _a : this.modelName;
        this.batchSize = (_b = fields === null || fields === void 0 ? void 0 : fields.batchSize) !== null && _b !== void 0 ? _b : this.batchSize;
        const clientConfig = new Configuration({
            apiKey: (_c = fields === null || fields === void 0 ? void 0 : fields.openAIApiKey) !== null && _c !== void 0 ? _c : process.env.OPENAI_API_KEY,
        });
        this.client = new OpenAIApi(clientConfig);
    }
    async embedDocuments(texts) {
        const subPrompts = (0, util_1.chunkArray)(texts, this.batchSize);
        const embeddings = [];
        for (let i = 0; i < subPrompts.length; i += 1) {
            const input = subPrompts[i];
            const { data } = await this.embeddingWithRetry({
                model: this.modelName,
                input,
            });
            for (let j = 0; j < input.length; j += 1) {
                embeddings.push(data.data[j].embedding);
            }
        }
        return embeddings;
    }
    async embedQuery(text) {
        const { data } = await this.embeddingWithRetry({
            model: this.modelName,
            input: text,
        });
        return data.data[0].embedding;
    }
    embeddingWithRetry(request) {
        const makeCompletionRequest = () => this.client.createEmbedding(request);
        return (0, exponential_backoff_1.backOff)(makeCompletionRequest, {
            startingDelay: 4,
            maxDelay: 10,
            numOfAttempts: this.maxRetries,
        });
    }
}
exports.OpenAIEmbeddings = OpenAIEmbeddings;
//# sourceMappingURL=openai.js.map