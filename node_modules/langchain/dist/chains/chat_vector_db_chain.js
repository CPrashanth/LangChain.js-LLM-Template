"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatVectorDBQAChain = void 0;
const index_1 = require("./index");
const prompts_1 = require("../prompts");
const util_1 = require("../util");
const question_generator_template = `Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.

Chat History:
{chat_history}
Follow Up Input: {question}
Standalone question:`;
const question_generator_prompt = prompts_1.PromptTemplate.fromTemplate(question_generator_template);
const qa_template = `Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

{context}

Question: {question}
Helpful Answer:`;
const qa_prompt = prompts_1.PromptTemplate.fromTemplate(qa_template);
class ChatVectorDBQAChain extends index_1.BaseChain {
    get inputKeys() {
        return [this.inputKey, this.chatHistoryKey];
    }
    constructor(fields) {
        var _a, _b, _c;
        super();
        Object.defineProperty(this, "k", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 4
        });
        Object.defineProperty(this, "inputKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "question"
        });
        Object.defineProperty(this, "chatHistoryKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "chat_history"
        });
        Object.defineProperty(this, "outputKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "result"
        });
        Object.defineProperty(this, "vectorstore", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "combineDocumentsChain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "questionGeneratorChain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.vectorstore = fields.vectorstore;
        this.combineDocumentsChain = fields.combineDocumentsChain;
        this.questionGeneratorChain = fields.questionGeneratorChain;
        this.inputKey = (_a = fields.inputKey) !== null && _a !== void 0 ? _a : this.inputKey;
        this.outputKey = (_b = fields.outputKey) !== null && _b !== void 0 ? _b : this.outputKey;
        this.k = (_c = fields.k) !== null && _c !== void 0 ? _c : this.k;
    }
    async _call(values) {
        if (!(this.inputKey in values)) {
            throw new Error(`Question key ${this.inputKey} not found.`);
        }
        if (!(this.chatHistoryKey in values)) {
            throw new Error(`chat history key ${this.inputKey} not found.`);
        }
        const question = values[this.inputKey];
        const chatHistory = values[this.chatHistoryKey];
        let newQuestion = question;
        if (chatHistory.length > 0) {
            const result = await this.questionGeneratorChain.call({
                question,
                chat_history: chatHistory,
            });
            const keys = Object.keys(result);
            if (keys.length === 1) {
                newQuestion = result[keys[0]];
            }
            else {
                throw new Error("Return from llm chain has multiple values, only single values supported.");
            }
        }
        const docs = await this.vectorstore.similaritySearch(newQuestion, this.k);
        const inputs = {
            question,
            input_documents: docs,
            chat_history: chatHistory,
        };
        const result = await this.combineDocumentsChain.call(inputs);
        return result;
    }
    _chainType() {
        return "chat-vector-db";
    }
    static async deserialize(data, values) {
        if (!("vectorstore" in values)) {
            throw new Error(`Need to pass in a vectorstore to deserialize VectorDBQAChain`);
        }
        const { vectorstore } = values;
        const serializedCombineDocumentsChain = (0, util_1.resolveConfigFromFile)("combine_documents_chain", data);
        const serializedQuestionGeneratorChain = (0, util_1.resolveConfigFromFile)("question_generator", data);
        return new ChatVectorDBQAChain({
            combineDocumentsChain: await index_1.BaseChain.deserialize(serializedCombineDocumentsChain),
            questionGeneratorChain: await index_1.LLMChain.deserialize(serializedQuestionGeneratorChain),
            k: data.k,
            vectorstore,
        });
    }
    serialize() {
        return {
            _type: this._chainType(),
            combine_documents_chain: this.combineDocumentsChain.serialize(),
            question_generator: this.questionGeneratorChain.serialize(),
            k: this.k,
        };
    }
    static fromLLM(llm, vectorstore) {
        const qaChain = (0, index_1.loadQAChain)(llm, { prompt: qa_prompt });
        const questionGeneratorChain = new index_1.LLMChain({
            prompt: question_generator_prompt,
            llm,
        });
        const instance = new this({
            vectorstore,
            combineDocumentsChain: qaChain,
            questionGeneratorChain,
        });
        return instance;
    }
}
exports.ChatVectorDBQAChain = ChatVectorDBQAChain;
//# sourceMappingURL=chat_vector_db_chain.js.map