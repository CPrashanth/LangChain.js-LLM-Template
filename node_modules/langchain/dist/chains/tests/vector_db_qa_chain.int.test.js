"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const openai_1 = require("../../llms/openai");
const prompts_1 = require("../../prompts");
const llm_chain_1 = require("../llm_chain");
const load_1 = require("../load");
const combine_docs_chain_1 = require("../combine_docs_chain");
const vector_db_qa_1 = require("../vector_db_qa");
const hnswlib_1 = require("../../vectorstores/hnswlib");
const embeddings_1 = require("../../embeddings");
(0, globals_1.test)("Test VectorDBQAChain", async () => {
    const model = new openai_1.OpenAI({});
    const prompt = new prompts_1.PromptTemplate({
        template: "Print {foo}",
        inputVariables: ["foo"],
    });
    const vectorStore = await hnswlib_1.HNSWLib.fromTexts(["Hello world", "Bye bye", "hello nice world", "bye", "hi"], [{ id: 2 }, { id: 1 }, { id: 3 }, { id: 4 }, { id: 5 }], new embeddings_1.OpenAIEmbeddings());
    const llmChain = new llm_chain_1.LLMChain({ prompt, llm: model });
    const combineDocsChain = new combine_docs_chain_1.StuffDocumentsChain({
        llmChain,
        documentVariableName: "foo",
    });
    const chain = new vector_db_qa_1.VectorDBQAChain({
        combineDocumentsChain: combineDocsChain,
        vectorstore: vectorStore,
    });
    const res = await chain.call({ query: "What up" });
    console.log({ res });
});
(0, globals_1.test)("Test VectorDBQAChain from LLM", async () => {
    const model = new openai_1.OpenAI({});
    const vectorStore = await hnswlib_1.HNSWLib.fromTexts(["Hello world", "Bye bye", "hello nice world", "bye", "hi"], [{ id: 2 }, { id: 1 }, { id: 3 }, { id: 4 }, { id: 5 }], new embeddings_1.OpenAIEmbeddings());
    const chain = vector_db_qa_1.VectorDBQAChain.fromLLM(model, vectorStore);
    const res = await chain.call({ query: "What up" });
    console.log({ res });
});
(0, globals_1.test)("Load chain from hub", async () => {
    const vectorStore = await hnswlib_1.HNSWLib.fromTexts(["Hello world", "Bye bye", "hello nice world", "bye", "hi"], [{ id: 2 }, { id: 1 }, { id: 3 }, { id: 4 }, { id: 5 }], new embeddings_1.OpenAIEmbeddings());
    const chain = await (0, load_1.loadChain)("lc://chains/vector-db-qa/stuff/chain.json", {
        vectorstore: vectorStore,
    });
    const res = await chain.call({ query: "what up" });
    console.log({ res });
});
//# sourceMappingURL=vector_db_qa_chain.int.test.js.map