"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SRTLoader = void 0;
const document_1 = require("../document");
const base_1 = require("./base");
let readFile = null;
let SRTParser2 = null;
try {
    // eslint-disable-next-line global-require,import/no-extraneous-dependencies
    ({ readFile } = require("fs/promises"));
    // eslint-disable-next-line global-require,import/no-extraneous-dependencies
    ({ SRTParser2 } = require("srt-parser-2"));
}
catch (_a) {
    // ignore error, will be throw in constructor
}
class SRTLoader extends base_1.BaseDocumentLoader {
    constructor(filePath) {
        super();
        Object.defineProperty(this, "filePath", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: filePath
        });
        /**
         * Throw error at construction time
         * if fs/promises is not installed.
         */
        if (readFile === null) {
            const { isBrowser, isNode, isWebWorker, isJsDom, isDeno,
            // eslint-disable-next-line global-require,@typescript-eslint/no-var-requires
             } = require("browser-or-node");
            let env;
            if (isBrowser) {
                env = "browser";
            }
            else if (isNode) {
                env = "node";
            }
            else if (isWebWorker) {
                env = "webworker";
            }
            else if (isJsDom) {
                env = "jsdom";
            }
            else if (isDeno) {
                env = "deno";
            }
            else {
                env = "other";
            }
            throw new Error(`Failed to load fs/promises. SRTLoader available only on environment 'node'. It appears you are running environment '${env}'. See https://<link to docs> for alternatives.`);
        }
        /**
         * Throw error at construction time
         * if srt-parser-2 is not installed.
         */
        if (SRTParser2 === null) {
            throw new Error("Please install srt-parser-2 as a dependency with, e.g. `yarn add srt-parser-2`");
        }
    }
    async load() {
        if (readFile === null) {
            throw new Error("Failed to load fs/promises.");
        }
        if (SRTParser2 === null) {
            throw new Error("Please install srt-parser-2 as a dependency with, e.g. `yarn add srt-parser-2`");
        }
        const file = await readFile(this.filePath, "utf8");
        const parser = new SRTParser2();
        const srts = parser.fromSrt(file);
        const text = srts.map((srt) => srt.text).join(" ");
        const metadata = { source: this.filePath };
        return [new document_1.Document({ pageContent: text, metadata })];
    }
}
exports.SRTLoader = SRTLoader;
//# sourceMappingURL=srt.js.map