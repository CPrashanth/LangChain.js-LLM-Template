import type { PineconeClient } from "pinecone-client";
import { VectorStore } from "./base";
import { Embeddings } from "../embeddings/base";
import { Document } from "../document";
type PineconeMetadata = Record<string, any>;
export declare class PineconeStore extends VectorStore {
    textKey: string;
    pineconeClient: PineconeClient<PineconeMetadata>;
    constructor(pineconeClient: PineconeClient<PineconeMetadata>, embeddings: Embeddings, textKey?: string);
    addDocuments(documents: Document[], ids?: string[]): Promise<void>;
    addVectors(vectors: number[][], documents: Document[], ids?: string[]): Promise<void>;
    similaritySearchVectorWithScore(query: number[], k: number): Promise<[Document, number][]>;
    static fromTexts(pineconeClient: PineconeClient<PineconeMetadata>, texts: string[], metadatas: object[], embeddings: Embeddings, textKey?: string): Promise<PineconeStore>;
    static fromDocuments(pineconeClient: PineconeClient<PineconeMetadata>, docs: Document[], embeddings: Embeddings, textKey?: string): Promise<PineconeStore>;
    static fromExistingIndex(pineconeClient: PineconeClient<PineconeMetadata>, embeddings: Embeddings, textKey?: string): Promise<PineconeStore>;
}
export {};
