"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const promises_1 = __importDefault(require("fs/promises"));
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const hnswlib_1 = require("../hnswlib");
const embeddings_1 = require("../../embeddings");
const document_1 = require("../../document");
(0, globals_1.test)("Test HNSWLib.fromTexts", async () => {
    var _a;
    const vectorStore = await hnswlib_1.HNSWLib.fromTexts(["Hello world", "Bye bye", "hello nice world"], [{ id: 2 }, { id: 1 }, { id: 3 }], new embeddings_1.OpenAIEmbeddings());
    (0, globals_1.expect)((_a = vectorStore.index) === null || _a === void 0 ? void 0 : _a.getCurrentCount()).toBe(3);
    const resultOne = await vectorStore.similaritySearch("hello world", 1);
    const resultOneMetadatas = resultOne.map(({ metadata }) => metadata);
    (0, globals_1.expect)(resultOneMetadatas).toEqual([{ id: 2 }]);
    const resultTwo = await vectorStore.similaritySearch("hello world", 3);
    const resultTwoMetadatas = resultTwo.map(({ metadata }) => metadata);
    (0, globals_1.expect)(resultTwoMetadatas).toEqual([{ id: 2 }, { id: 3 }, { id: 1 }]);
});
(0, globals_1.test)("Test HNSWLib.fromTexts + addDocuments", async () => {
    var _a, _b, _c;
    const vectorStore = await hnswlib_1.HNSWLib.fromTexts(["Hello world", "Bye bye", "hello nice world"], [{ id: 2 }, { id: 1 }, { id: 3 }], new embeddings_1.OpenAIEmbeddings());
    (0, globals_1.expect)((_a = vectorStore.index) === null || _a === void 0 ? void 0 : _a.getMaxElements()).toBe(3);
    (0, globals_1.expect)((_b = vectorStore.index) === null || _b === void 0 ? void 0 : _b.getCurrentCount()).toBe(3);
    await vectorStore.addDocuments([
        new document_1.Document({
            pageContent: "hello worldklmslksmn",
            metadata: { id: 4 },
        }),
    ]);
    (0, globals_1.expect)((_c = vectorStore.index) === null || _c === void 0 ? void 0 : _c.getMaxElements()).toBe(4);
    const resultTwo = await vectorStore.similaritySearch("hello world", 3);
    const resultTwoMetadatas = resultTwo.map(({ metadata }) => metadata);
    (0, globals_1.expect)(resultTwoMetadatas).toEqual([{ id: 2 }, { id: 3 }, { id: 4 }]);
});
(0, globals_1.test)("Test HNSWLib.load and HNSWLib.save", async () => {
    var _a;
    const vectorStore = await hnswlib_1.HNSWLib.fromTexts(["Hello world", "Bye bye", "hello nice world"], [{ id: 2 }, { id: 1 }, { id: 3 }], new embeddings_1.OpenAIEmbeddings());
    (0, globals_1.expect)((_a = vectorStore.index) === null || _a === void 0 ? void 0 : _a.getCurrentCount()).toBe(3);
    const resultOne = await vectorStore.similaritySearch("hello world", 1);
    const resultOneMetadatas = resultOne.map(({ metadata }) => metadata);
    (0, globals_1.expect)(resultOneMetadatas).toEqual([{ id: 2 }]);
    const resultTwo = await vectorStore.similaritySearch("hello world", 3);
    const resultTwoMetadatas = resultTwo.map(({ metadata }) => metadata);
    (0, globals_1.expect)(resultTwoMetadatas).toEqual([{ id: 2 }, { id: 3 }, { id: 1 }]);
    const tempDirectory = await promises_1.default.mkdtemp(path_1.default.join(os_1.default.tmpdir(), "lcjs-"));
    console.log(tempDirectory);
    await vectorStore.save(tempDirectory);
    const loadedVectorStore = await hnswlib_1.HNSWLib.load(tempDirectory, new embeddings_1.OpenAIEmbeddings());
    const resultThree = await loadedVectorStore.similaritySearch("hello world", 1);
    const resultThreeMetadatas = resultThree.map(({ metadata }) => metadata);
    (0, globals_1.expect)(resultThreeMetadatas).toEqual([{ id: 2 }]);
    const resultFour = await loadedVectorStore.similaritySearch("hello world", 3);
    const resultFourMetadatas = resultFour.map(({ metadata }) => metadata);
    (0, globals_1.expect)(resultFourMetadatas).toEqual([{ id: 2 }, { id: 3 }, { id: 1 }]);
});
//# sourceMappingURL=hnswlib.int.test.js.map